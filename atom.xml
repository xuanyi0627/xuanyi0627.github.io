<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.exgame.xyz</id>
    <title>Matrix</title>
    <updated>2020-06-30T08:58:51.052Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.exgame.xyz"/>
    <link rel="self" href="https://blog.exgame.xyz/atom.xml"/>
    <subtitle>思维方式决定了编程习惯&lt;br/&gt;
编程习惯奠定了工程质量&lt;br/&gt;
工程质量划定了能力边界</subtitle>
    <logo>https://blog.exgame.xyz/images/avatar.png</logo>
    <icon>https://blog.exgame.xyz/favicon.ico</icon>
    <rights>All rights reserved 2020, Matrix</rights>
    <entry>
        <title type="html"><![CDATA[「前端自学成才」小话前端技术栈]]></title>
        <id>https://blog.exgame.xyz/post/front-end-01/</id>
        <link href="https://blog.exgame.xyz/post/front-end-01/">
        </link>
        <updated>2020-05-07T02:11:09.000Z</updated>
        <content type="html"><![CDATA[<p>随着iOS、Android的应用逐渐被小程序、H5替代的趋势，作为一名有着7年iOS开发经验的小学生不禁对前端开发产生了兴趣。随着Flutter的出现，貌似现在前端开发成了潮流。我想要通过一个iOS开发者的角度，来说一下我自学前端的过程。</p>
<h3 id="初体验">初体验</h3>
<p>第一次接触HTML开发是在大学的时候，09年，还在用网页开发三剑客，<code>Dreamweaver</code>，<code>Firework</code>，<code>Flash</code>。那个时候也是我喜欢上前端开发的开始。</p>
<p>不同于后台开发，前端开发给大家的是及时呈现的状态，每当你写完一个页面或者一个动画、一个交互，都会给你及时满足。所以相对于那时候死气沉沉的C语言、汇编，前端开发的课就变得特别有意思。当然那时候的前端作业也是最费时间的，因为开始的时候做不好。后来，通过学习，能把老师给的样图一模一样的用HTML和CSS呈现出来。</p>
<p>记得前端老师说的一句话：</p>
<blockquote>
<p>做前端开发，就是要一个像素一个像素的扣，一点偏差都不行。</p>
</blockquote>
<p>这句话我记到了现在，也做到了现在。</p>
<h3 id="从头再来">从头再来</h3>
<p>在入职第一家公司的时候，面试的职位自然也是前端开发工程师，但是入职后被调去做了iOS，从iOS4做到现在的iOS13，在这个过程中，我并没有过多的关注前端的事情，直到<code>React Native</code>的出现，它似乎在挑战原生开发。这引起了我的注意和兴趣，于是我开始了自学前端开发。</p>
<h3 id="学习之路">学习之路</h3>
<p>前面的思维导图是我认为用得到的前端知识框架和我的学习路径，如果想学习前端的同学可以按照这个顺序去学习，也可以根据自己的喜欢和需要自行学习。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/05/07/dns2BKOZp4JVty1.png" alt="知识框架和学习路径" loading="lazy"></figure>
<p>后面的文章我也将记录我学习的笔记和坑。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[画一个弧线的View]]></title>
        <id>https://blog.exgame.xyz/post/ios-arc/</id>
        <link href="https://blog.exgame.xyz/post/ios-arc/">
        </link>
        <updated>2019-10-22T08:36:23.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://github.com/xuanyi0627/DrawArc">Github地址</a></p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/10/22/Ciqm73URxvX9KkP.png" alt="关键代码" loading="lazy"></figure>
<ul>
<li>
<p>主要方法</p>
<pre><code>CGContextAddArcToPoint(CGContextRef cg_nullable c, CGFloat x1, CGFloat y1, CGFloat x2, CGFloat y2, CGFloat radius)
</code></pre>
<blockquote>
<p>怎么理解这几个点呢</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2019/10/22/RF28xl75dPhOHyn.png" alt="怎么理解这几个点呢" loading="lazy"></figure>
<ul>
<li>预览</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://i.loli.net/2019/10/22/rbjHGPVzpBDdK7F.png" alt="预览" loading="lazy"></figure>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Taro前置内容 - 生命周期]]></title>
        <id>https://blog.exgame.xyz/post/tarojs-life/</id>
        <link href="https://blog.exgame.xyz/post/tarojs-life/">
        </link>
        <updated>2019-10-18T08:00:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前置技能">前置技能</h3>
<blockquote>
<p>React</p>
</blockquote>
<h3 id="indexjsx">index.jsx</h3>
<p>进入<code>src/pages/index/index.jsx</code>这个文件，然后让我们好好看看这个文件里的内容。</p>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/10/18/mBvHWaz6XnZry2o.png" alt="index.jsx" loading="lazy"></figure>
<p>这是一份无添加的样式。我们看到里面的内容包括：</p>
<ul>
<li>行1-3的引用</li>
<li>行5声明一个class</li>
<li>行7-9设置这个页面的title（用于小程序）</li>
<li>行11-19生命周期</li>
<li>行21-28，一个render函数（学过React的都知道）
<ul>
<li>View和Text都是Taro的组件，相当于原来的div和span。（你可以这么理解一下）</li>
</ul>
</li>
</ul>
<p>这个是运行结果</p>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2019/10/18/vRNGaLYHeqB6mPM.png" alt="运行结果" loading="lazy"></figure>
<h3 id="生命周期">生命周期</h3>
<p><a href="https://nervjs.github.io/taro/docs/tutorial.html#componentwillmount">快速查看</a></p>
<pre><code class="language-javascript">componentWillMount () {
    console.log('componentWillMount')
    console.log('监听程序初始化，初始化完成时触发（全局只触发一次）')
    console.log('在此生命周期中通过 this.$router.params，可以访问到程序初始化参数')
    console.log('在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 app 的 onLaunch')
  }

  componentDidMount () {
    console.log('componentDidMount')
    console.log('监听程序初始化，初始化完成时触发（全局只触发一次）')
    console.log('在此生命周期中也可以通过 this.$router.params，访问到程序初始化参数')
    console.log('在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 app 的 onLaunch，在 componentWillMount 后执行')
  }

  componentWillReceiveProps(nextProps) {
    console.log('componentWillReceiveProps')
    console.log('已经装载的组件接收到新属性前调用')
    console.log('在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化render时不会被调用')
  }

  shouldComponentUpdate(nextProps, nextState) {
    console.log('shouldComponentUpdate')
    console.log('组件是否需要更新，返回 false 不继续更新，否则继续走更新流程')
    console.log('返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用')
    return true
  }

  componentWillUpdate(nextProps, nextState) {
    console.log('componentWillUpdate')
    console.log('在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用')
  }

  componentDidUpdate(prevProps, prevState) {
    console.log('componentDidUpdate')
    console.log('在组件完成更新后立即调用。在初始化时不会被调用')
  }

  componentWillUnmount () {
    console.log('componentWillUnmount')
    console.log('组件卸载时触发')
    console.log('在组件从 DOM 中移除之前立刻被调用')
  }

  componentDidShow () {
    console.log('componentDidShow')
    console.log('程序启动，或从后台进入前台显示时触发，微信小程序中也可以使用 Taro.onAppShow 绑定监听')
    console.log('在此生命周期中通过 this.$router.params，可以访问到程序初始化参数')
    console.log('在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 onShow，在 H5/RN 中同步实现')
  }

  componentDidHide () {
    console.log('componentDidHide')
    console.log('程序从前台进入后台时触发，微信小程序中也可以使用 Taro.onAppHide 绑定监听')
    console.log('在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 onHide，在 H5/RN 中同步实现')
  }

  componentDidCatchError (error) {
    console.log('componentDidCatchError')
    console.log('程序发生脚本错误或 API 调用报错时触发，微信小程序中也可以使用 Taro.onError 绑定监听')
    console.log('在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 onError，H5/RN 中尚未实现')
  }

  componentDidNotFound (object) {
    console.log('componentDidNotFound')
    console.log('程序要打开的页面不存在时触发，微信小程序中也可以使用 Taro.onPageNotFound 绑定监听')
    console.log('在微信/字节跳动小程序中这一生命周期方法对应 onPageNotFound，其他端尚未实现，微信小程序中，基础库 1.9.90 开始支持')
  }
</code></pre>
<p>run一下看看顺序是啥？</p>
<ul>
<li>
<p>h5<br>
<img src="https://i.loli.net/2019/10/18/CMw4K6Emc8BVxe2.png" alt="生命周期运行结果" loading="lazy"></p>
</li>
<li>
<p>微信小程序<br>
<img src="https://i.loli.net/2019/10/18/lA9xbGwPgmKMsd5.png" alt="生命周期运行结果" loading="lazy"></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Taro初相识]]></title>
        <id>https://blog.exgame.xyz/post/tarojs-init/</id>
        <link href="https://blog.exgame.xyz/post/tarojs-init/">
        </link>
        <updated>2019-09-29T01:06:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="官网">官网</h3>
<p><a href="https://taro.aotu.io/">https://taro.aotu.io/</a></p>
<h3 id="安装">安装</h3>
<pre><code class="language-shell">$ yarn global add @tarojs/cli
</code></pre>
<h3 id="更新-taro">更新 Taro</h3>
<pre><code class="language-shell">$ taro update self
</code></pre>
<h3 id="创建项目">创建项目</h3>
<pre><code class="language-shell">$ taro init 项目名称
</code></pre>
<p>CLI会让我们做四个选择，现在我们只需要用最简单的方式创建项目，所以我们作出以下选择：</p>
<table>
<thead>
<tr>
<th>问题</th>
<th>选择</th>
</tr>
</thead>
<tbody>
<tr>
<td>请输入项目介绍！</td>
<td>根据项目需求自己写</td>
</tr>
<tr>
<td>是否需要使用 TypeScript ？ (Y/n)</td>
<td>n</td>
</tr>
<tr>
<td>请选择 CSS 预处理器（Sass/Less/Stylus/无）</td>
<td>无</td>
</tr>
<tr>
<td>请选择模板（默认模板/mobx/redux/wxcloud/wxplugin）</td>
<td>默认模板</td>
</tr>
</tbody>
</table>
<p>创建成功后等终端出现一下字样即为创建成功。</p>
<blockquote>
<p>创建项目 todoList 成功！<br>
请进入项目目录 todoList 开始工作吧！😝</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2019/09/29/nFvweyZ3PCjE8M7.png" alt="创建流程" loading="lazy"></figure>
<h3 id="更新">更新</h3>
<ul>
<li>更新 taro-cli 工具：</li>
</ul>
<pre><code class="language-shell"># taro
$ taro update self

# npm 
npm i -g @tarojs/cli@latest 

# yarn 
yarn global add @tarojs/cli@latest
</code></pre>
<ul>
<li>更新项目中 Taro 相关的依赖</li>
</ul>
<pre><code class="language-shell">taro update project
</code></pre>
<h3 id="文件目录">文件目录</h3>
<figure data-type="image" tabindex="2"><img src="https://i.loli.net/2019/09/29/2E9UVHaORmi3KcD.png" alt="文件目录" loading="lazy"></figure>
<ul>
<li>config - 配置文件</li>
<li>src - 资源文件</li>
</ul>
<h3 id="编译和打包">编译和打包</h3>
<ul>
<li>微信小程序编译预览及打包</li>
</ul>
<pre><code class="language-shell"># npm script

$ npm run dev:weapp

$ npm run build:weapp

# 仅限全局安装

$ taro build --type weapp --watch

$ taro build --type weapp
</code></pre>
<ul>
<li>百度小程序</li>
</ul>
<pre><code class="language-shell"># npm script

$ npm run dev:swan
$ npm run build:swan

# 仅限全局安装

$ taro build --type swan --watch
$ taro build --type swan
</code></pre>
<ul>
<li>支付宝小程序</li>
</ul>
<pre><code class="language-shell"># npm script

$ npm run dev:alipay
$ npm run build:alipay

# 仅限全局安装

$ taro build --type alipay --watch
$ taro build --type alipay
</code></pre>
<ul>
<li>H5</li>
</ul>
<pre><code class="language-shell"># npm script

$ npm run dev:h5

# 仅限全局安装

$ taro build --type h5 --watch
</code></pre>
<ul>
<li>React Native</li>
</ul>
<pre><code class="language-shell"># npm script

$ npm run dev:rn

# 仅限全局安装

$ taro build --type rn --watch
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL 常用方法]]></title>
        <id>https://blog.exgame.xyz/post/mysqlfunc/</id>
        <link href="https://blog.exgame.xyz/post/mysqlfunc/">
        </link>
        <updated>2019-09-18T08:41:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="转变表character">转变表CHARACTER</h3>
<pre><code>ALTER TABLE tb_partner DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
</code></pre>
<h3 id="转变字段character">转变字段CHARACTER</h3>
<pre><code>ALTER TABLE tb_partner MODIFY COLUMN telephone VARCHAR(45) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL 安装配置]]></title>
        <id>https://blog.exgame.xyz/post/mysqlinstall/</id>
        <link href="https://blog.exgame.xyz/post/mysqlinstall/">
        </link>
        <updated>2019-09-18T08:35:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="系统">系统</h3>
<blockquote>
<p>CentOS7.x</p>
</blockquote>
<h3 id="安装">安装</h3>
<pre><code>yum install mysql

yum install mysql-devel

wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm

rpm -ivh mysql-community-release-el7-5.noarch.rpm

yum install mysql-community-server
</code></pre>
<h3 id="启动mysql">启动MySQL</h3>
<pre><code>service mysqld restart
</code></pre>
<h3 id="设置用户和密码">设置用户和密码</h3>
<pre><code>mysql -u root
set password for 'root'@'localhost' =password('8sIjjbzAxWSsC65A');
</code></pre>
<h3 id="修改配置文件">修改配置文件</h3>
<blockquote>
<p>mysql配置文件为/etc/my.cnf</p>
</blockquote>
<h3 id="加上编码配置">加上编码配置</h3>
<pre><code>default-character-set =utf8
</code></pre>
<h3 id="远程连接">远程连接</h3>
<pre><code>mysql&gt; grant all privileges on *.* to server@'%'identified by '8sIjjbzAxWSsC65A';
</code></pre>
<h3 id="创建新用户">创建新用户</h3>
<pre><code>mysql&gt;create user 'server'@'%' identified by '8sIjjbzAxWSsC65A';
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang 技巧汇总]]></title>
        <id>https://blog.exgame.xyz/post/golang/</id>
        <link href="https://blog.exgame.xyz/post/golang/">
        </link>
        <updated>2019-09-18T08:30:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="交叉编译">交叉编译</h3>
<pre><code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go install version_pro.go
</code></pre>
<h3 id="centos下载解压golang">CentOS下载解压Golang</h3>
<pre><code>wget https://storage.googleapis.com/golang/go1.10.linux-amd64.tar.gz
tar -zxvf go1.8.linux-amd64.tar.gz -C /usr/local
</code></pre>
<h3 id="配置环境">配置环境</h3>
<pre><code>sudo vim /etc/profile

export GOROOT=/usr/local/go 
export GOPATH=/home/ubuntu/webgo
export PATH=$GOROOT/bin:$PATH
export GOBIN=/home/ubuntu/webgo/bin

source /etc/profile
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx 1.14 ]]></title>
        <id>https://blog.exgame.xyz/post/nginx/</id>
        <link href="https://blog.exgame.xyz/post/nginx/">
        </link>
        <updated>2019-09-18T08:25:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="系统">系统</h3>
<blockquote>
<p>CentOS7.x</p>
</blockquote>
<h3 id="准备工作">准备工作</h3>
<pre><code>yum install -y gcc

yum install -y pcre pcre-devel

yum install -y zlib zlib-devel

yum install -y openssl openssl-devel
</code></pre>
<h3 id="安装nginx">安装Nginx</h3>
<pre><code>wget http://nginx.org/download/nginx-1.14.2.tar.gz
tar -zxvf nginx-1.14.0.tar.gz
cd nginx-1.14.0/
</code></pre>
<pre><code>./configure --prefix=/usr/local/nginx --pid-path=/run/nginx.pid  --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log  --with-http_ssl_module --with-http_v2_module --with-http_stub_status_module --with-pcre
</code></pre>
<pre><code>make
make install
</code></pre>
<h3 id="安装目录">安装目录</h3>
<blockquote>
<p>默认Nginx安装在/usr/local/nginx/中</p>
</blockquote>
<h3 id="常用命令">常用命令</h3>
<pre><code>/usr/local/nginx/sbin/nginx #默认启动方式 start

/usr/local/nginx/sbin/nginx -t #测试配置信息

/usr/local/nginx/sbin/nginx -v #显示版本信息，-V（大V）显示编译时的参数

/usr/local/nginx/sbin/nginx -s stop #快速停止服务

/usr/local/nginx/sbin/nginx -s quit #正常停止服务 

/usr/local/nginx/sbin/nginx -s reload #重启
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Supervisor为Go守护进程]]></title>
        <id>https://blog.exgame.xyz/post/supervisorgo/</id>
        <link href="https://blog.exgame.xyz/post/supervisorgo/">
        </link>
        <updated>2019-09-18T08:12:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="系统">系统</h3>
<blockquote>
<p>CentOS7.x</p>
</blockquote>
<h3 id="步骤">步骤</h3>
<ol>
<li>切换用户为root</li>
</ol>
<pre><code class="language-shell"># sudo su - #切换为root用户
</code></pre>
<ol start="2">
<li>安装</li>
</ol>
<pre><code># yum install epel-release
# yum install -y supervisor
# systemctl enable supervisord # 开机自启动
# systemctl start supervisord # 启动supervisord服务

# systemctl status supervisord # 查看supervisord服务状态
# ps -ef|grep supervisord # 查看是否存在supervisord进程
</code></pre>
<ol start="3">
<li>创建supervisor所需目录</li>
</ol>
<pre><code># mkdir /etc/supervisord.d/
</code></pre>
<ol start="4">
<li>创建supervisor配置文件</li>
</ol>
<pre><code># echo_supervisord_conf &gt; /etc/supervisord.conf
</code></pre>
<ol start="5">
<li>编辑supervisord.conf文件</li>
</ol>
<pre><code>[include]
files = /etc/supervisord.d/*.ini
</code></pre>
<ol start="6">
<li>启动supervisor</li>
</ol>
<pre><code># supervisord -c /etc/supervisord.conf
</code></pre>
<ol start="7">
<li>重启ERROR</li>
</ol>
<blockquote>
<p>Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting</p>
</blockquote>
<pre><code>find / -name supervisor.sock
unlink /tmp/supervisor.sock
</code></pre>
<ol start="8">
<li>*.ini 文件模板</li>
</ol>
<pre><code>[program:server_version]
command=/usr/local/gopath/bin/version_pro
autostart=true
autorestart=true
startsecs=10
stdout_logfile=/var/log/supervisord/version.log
stdout_logfile_maxbytes=1MB
stdout_logfile_backups=10
stdout_capture_maxbytes=1MB
stderr_logfile=/var/log/supervisord/version.log
stderr_logfile_maxbytes=1MB
stderr_logfile_backups=10
stderr_capture_maxbytes=1MB
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SignUp VS Register | SignIn VS Login]]></title>
        <id>https://blog.exgame.xyz/post/diffwithfourword/</id>
        <link href="https://blog.exgame.xyz/post/diffwithfourword/">
        </link>
        <updated>2019-02-21T08:13:36.000Z</updated>
        <content type="html"><![CDATA[<p>你知道这两组词的区别么？</p>
<blockquote>
<ul>
<li>Sign in</li>
<li>Log in</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Sign up</li>
<li>Register</li>
</ul>
</blockquote>
<p>宣匠来给你划重点了</p>
<p>！！！敲黑板</p>
<p>诶？你怎么不拿本记呢？</p>
<p><a href="https://english.stackexchange.com/questions/211729/what-is-the-difference-between-log-in-sign-in-register-sign-up-log-out-sign">解释来源点这里</a></p>
<ul>
<li><strong>both login and sign in are the same as authenticate</strong><br>
verb, to validate the user. Otherwise password are not required.</li>
<li><strong>both logout and sign out are the same</strong></li>
<li><strong>log in is to authenticate into a website that has different interface as guest</strong><br>
You cannot use the logged in interface if you are a guest, e.g. Facebook</li>
<li><strong>sign in is to authenticate into a website that has same interface as guest</strong><br>
You can still use the website without signing in, e.g. Google</li>
<li><strong>register is entering your information into the system for your account for serious thing</strong><br>
You need to enter your information like name, address, contact number, etc for domain registration. Another example is company registration.</li>
<li><strong>sign up is to create an account to use</strong><br>
You only need to enter essential information like email, username, password, etc for a Facebook account.</li>
</ul>
<p>我不负责翻译，我只是重点的搬运工</p>
]]></content>
    </entry>
</feed>